{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../EncryptionSettings.svelte",
    "../../Modal.svelte"
  ],
  "sourcesContent": [
    "<script>\nexport let secret\nexport let visible\nimport Modal from './Modal.svelte'\nimport { scrypt, randomBytes } from 'cryptology'\n// import { writable } from 'svelte/store'\nlet passphrase\nlet type = 0\nlet computing = false // writable(false)\nconst applyFn = () => {\n  switch (type) {\n    case 1:\n      console.time('scrypt')\n      computing = true\n      const salt = randomBytes(6)\n      scrypt(passphrase, salt)\n        .then(buffer => {\n          console.timeEnd('scrypt')\n          secret.set({ salt, key: buffer, type })\n          passphrase = ''\n          computing = false\n          visible.set(false)\n        })\n      break\n    case 0:\n    default:\n      secret.set({ type: 0 })\n      visible.set(false)\n  }\n}\n</script>\n<section>\n  {#if $visible}\n    <Modal on:close=\"{() => $visible = false}\">\n      <h2 slot=\"header\" style=\"text-align: center\">\n        Choose encryption type\n      </h2>\n      <div>\n        <label for=\"plain\"><input id=\"plain\" type=\"radio\" bind:group={type} value={0}> No encryption </label>\n        <label for=\"pw\"><input id=\"pw\" type=\"radio\" bind:group={type} value={1}> Passphrase</label>\n        <label for=\"box\"><input id=\"box\" type=\"radio\" bind:group={type} value={2}/> Personal</label>\n        <label for=\"pz\"><input id=\"pz\" type=\"radio\" bind:group={type} value={3}/> Puzzlebox</label>\n        <div style=\"text-align: center\">\n          {#if type == 1 }\n            <p>Encrypt with a passphrase</p>\n            <input id=\"pw\"\n                   type=\"text\"\n                   disabled={computing}\n                   on:keydown={e => e.key === 'Enter' && applyFn()}\n                   bind:value={passphrase} />\n            <br/>\n            <small>This is the only time you will see the password</small>\n            {#if computing}<h3>Deriving key...</h3>{/if}\n          {:else if type === 2}\n            <p>Only the receiver will be able to read the message</p>\n            <textarea disabled=\"true\" placeholder=\"Receivers public box key\"></textarea>\n            <br/><a href=\"https://github.com/telamon/rant/issues\">Not impl yet.</a>\n          {:else if type === 3}\n            <p>A simple lock that can be cracked open with time</p>\n            <br/><a href=\"https://github.com/telamon/rant/issues\">Not impl yet.</a>\n          {:else}\n            <p>Anybody with the link can read the message</p>\n          {/if}\n        </div>\n      </div>\n      <span slot=\"ctrls\">\n        <button on:click={applyFn}>apply</button>\n      </span>\n    </Modal>\n  {/if}\n</section>\n<style>\n  #pw { font-size: large; padding: 0.5em; }\n</style>\n",
    "<script>\n  // Borrowed from the examples.\n\timport { createEventDispatcher, onDestroy } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n\tconst close = () => dispatch('close');\n\n\tlet modal;\n\n\tconst handleKeydown = e => {\n\t\tif (e.key === 'Escape') {\n\t\t\tclose();\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.key === 'Tab') {\n\t\t\t// trap focus\n\t\t\tconst nodes = modal.querySelectorAll('*');\n\t\t\tconst tabbable = Array.from(nodes).filter(n => n.tabIndex >= 0);\n\n\t\t\tlet index = tabbable.indexOf(document.activeElement);\n\t\t\tif (index === -1 && e.shiftKey) index = 0;\n\n\t\t\tindex += tabbable.length + (e.shiftKey ? -1 : 1);\n\t\t\tindex %= tabbable.length;\n\n\t\t\ttabbable[index].focus();\n\t\t\te.preventDefault();\n\t\t}\n\t};\n\n\tconst previously_focused = typeof document !== 'undefined' && document.activeElement;\n\n\tif (previously_focused) {\n\t\tonDestroy(() => {\n\t\t\tpreviously_focused.focus();\n\t\t});\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeydown}/>\n\n<div class=\"modal-background\" on:click={close}></div>\n\n<div class=\"modal\" role=\"dialog\" aria-modal=\"true\" bind:this={modal}>\n  <slot name=\"header\"></slot>\n  <br/>\n\t<slot></slot>\n  <br/>\n  <!-- svelte-ignore a11y-autofocus -->\n  <div class=\"modal-ctrls\">\n    <button autofocus on:click={close}>close</button>\n    <slot name=\"ctrls\"></slot>\n  </div>\n</div>\n\n<style>\n  .modal-ctrls {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\t.modal-background {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground: rgba(0,0,0,0.3);\n\t}\n\n\t.modal {\n\t\tposition: absolute;\n\t\tleft: 50%;\n\t\ttop: 50%;\n\t\twidth: calc(100vw - 4em);\n\t\tmax-width: 32em;\n\t\tmax-height: calc(100vh - 4em);\n\t\toverflow: auto;\n\t\ttransform: translate(-50%,-50%);\n\t\tpadding: 1em;\n\t  /* border-radius: 0.2em;*/\n\t\tbackground: white;\n\t}\n\n\tbutton {\n\t\tdisplay: block;\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAwEE,GAAG,cAAC,CAAC,AAAC,SAAS,CAAE,KAAK,CAAE,OAAO,CAAE,KAAK,AAAE,CAAC;ACfzC,YAAY,cAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,AAChC,CAAC,AACF,iBAAiB,cAAC,CAAC,AAClB,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5B,CAAC,AAED,MAAM,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CACxB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAC7B,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,UAAU,IAAI,CAAC,IAAI,CAAC,CAC/B,OAAO,CAAE,GAAG,CAEZ,UAAU,CAAE,KAAK,AAClB,CAAC,AAED,MAAM,cAAC,CAAC,AACP,OAAO,CAAE,KAAK,AACf,CAAC"
}